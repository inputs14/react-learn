{"ast":null,"code":"import _defineProperty from \"/root/react/counters/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { INCREMENT, DECREMENT } from \"../actions/actions\"; // Reducer helps to return the state from the store as Redux dont know a thing\n\nconst initialState = {\n  counters: [{\n    id: 1,\n    value: 0\n  }, {\n    id: 2,\n    value: 1\n  }, {\n    id: 3,\n    value: 2\n  }, {\n    id: 4,\n    value: 3\n  }]\n};\nexport default function counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case INCREMENT:\n      var counters = [...state.counters];\n      var index = counters.indexOf(action.payload.counterId);\n      counters[index] = _objectSpread({}, action.payload.counterId);\n      counters[index].value++;\n      return _objectSpread({}, state, {\n        counters\n      });\n\n    case DECREMENT:\n      var counters = [...state.counters];\n      var index = counters.indexOf(action.payload.counterId);\n      counters[index] = _objectSpread({}, action.payload.counterId);\n      if (counters[index].value !== 0) counters[index].value--;\n      return _objectSpread({}, state, {\n        counters\n      });\n\n    case DELETE:\n      var counters = state.counters.filter(C);\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/root/react/counters/src/reducers/counterReducer.js"],"names":["INCREMENT","DECREMENT","initialState","counters","id","value","counterReducer","state","action","type","index","indexOf","payload","counterId","DELETE","filter","C"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,oBAArC,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CACR;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE;AAAhB,GADQ,EAER;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE;AAAhB,GAFQ,EAGR;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE;AAAhB,GAHQ,EAIR;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE;AAAhB,GAJQ;AADS,CAArB;AAQA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAGL,YAAhC,EAA8CM,MAA9C,EAAsD;AACnE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,SAAL;AACE,UAAIG,QAAQ,GAAG,CAAC,GAAGI,KAAK,CAACJ,QAAV,CAAf;AACA,UAAIO,KAAK,GAAGP,QAAQ,CAACQ,OAAT,CAAiBH,MAAM,CAACI,OAAP,CAAeC,SAAhC,CAAZ;AACAV,MAAAA,QAAQ,CAACO,KAAD,CAAR,qBAAuBF,MAAM,CAACI,OAAP,CAAeC,SAAtC;AACAV,MAAAA,QAAQ,CAACO,KAAD,CAAR,CAAgBL,KAAhB;AACA,+BACKE,KADL;AAEEJ,QAAAA;AAFF;;AAKF,SAAKF,SAAL;AACE,UAAIE,QAAQ,GAAG,CAAC,GAAGI,KAAK,CAACJ,QAAV,CAAf;AACA,UAAIO,KAAK,GAAGP,QAAQ,CAACQ,OAAT,CAAiBH,MAAM,CAACI,OAAP,CAAeC,SAAhC,CAAZ;AACAV,MAAAA,QAAQ,CAACO,KAAD,CAAR,qBAAuBF,MAAM,CAACI,OAAP,CAAeC,SAAtC;AACA,UAAIV,QAAQ,CAACO,KAAD,CAAR,CAAgBL,KAAhB,KAA0B,CAA9B,EAAiCF,QAAQ,CAACO,KAAD,CAAR,CAAgBL,KAAhB;AACjC,+BACKE,KADL;AAEEJ,QAAAA;AAFF;;AAKF,SAAKW,MAAL;AACE,UAAIX,QAAQ,GAAGI,KAAK,CAACJ,QAAN,CAAeY,MAAf,CAAsBC,CAAtB,CAAf;AAtBJ;;AAwBA,SAAOT,KAAP;AACD","sourcesContent":["import { INCREMENT, DECREMENT } from \"../actions/actions\";\n\n// Reducer helps to return the state from the store as Redux dont know a thing\nconst initialState = {\n  counters: [\n    { id: 1, value: 0 },\n    { id: 2, value: 1 },\n    { id: 3, value: 2 },\n    { id: 4, value: 3 }\n  ]\n};\nexport default function counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case INCREMENT:\n      var counters = [...state.counters];\n      var index = counters.indexOf(action.payload.counterId);\n      counters[index] = { ...action.payload.counterId };\n      counters[index].value++;\n      return {\n        ...state,\n        counters\n      };\n\n    case DECREMENT:\n      var counters = [...state.counters];\n      var index = counters.indexOf(action.payload.counterId);\n      counters[index] = { ...action.payload.counterId };\n      if (counters[index].value !== 0) counters[index].value--;\n      return {\n        ...state,\n        counters\n      };\n\n    case DELETE:\n      var counters = state.counters.filter(C)\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}