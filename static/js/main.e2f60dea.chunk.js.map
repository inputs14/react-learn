{"version":3,"sources":["actions/actions.js","components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","reducers/counterReducer.js","reducers/index.js","index.js","store.js"],"names":["INCREMENT","DECREMENT","DELETE","RESET","GET_COUNTERS","connect","state","counters","Props","className","length","type","onClick","dispatch","counter","getBadgeClass","props","value","getCounterValue","getDisabledState","handleIncrement","counterId","payload","handleDecrement","counterDelete","Fragment","this","disabled","id","Component","Counters","map","c","key","App","Boolean","window","location","hostname","match","initialState","combineReducers","action","index","indexOf","filter","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2f60dea.chunk.js","sourcesContent":["export const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\nexport const DELETE = \"DELETE\";\nexport const RESET = \"RESET\";\nexport const GET_COUNTERS = \"GET_COUNTERS\";\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RESET, GET_COUNTERS } from \"../actions/actions\";\n\nconst Navbar = Props => {\n  function handleReset() {\n    Props.dispatch({\n      type: RESET\n    });\n  }\n\n  function getCounters() {\n    Props.dispatch({\n      type: GET_COUNTERS\n    });\n  }\n  return (\n    <div className=\"container-fluid\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <h1 className=\"text-right\">\n          Total counters - &nbsp;\n          <span className=\"badge badge-secondary\">\n            {Props.counters.counters.length}\n          </span>\n        </h1>{\" \"}\n        &nbsp; &nbsp;\n        <button\n          type=\"button\"\n          className=\"btn btn-success\"\n          onClick={() => handleReset()}\n        >\n          Reset\n        </button>\n      </nav>\n      <hr />\n    </div>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    counters: state.counters\n  };\n}\n\nexport default connect(mapStateToProps)(Navbar);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { INCREMENT, DECREMENT, DELETE } from \"../actions/actions\";\n\nclass counter extends Component {\n  getBadgeClass = () => {\n    if (this.props.counter.value !== 0) {\n      return \"badge badge-pill badge-primary\";\n    } else {\n      return \"badge badge-pill badge-warning\";\n    }\n  };\n\n  getCounterValue = () => {\n    if (this.props.counter.value === 0) return \"Zero\";\n    return this.props.counter.value;\n  };\n\n  getDisabledState = () => {\n    if (this.props.counter.value === 0) return true;\n    return false;\n  };\n\n  handleIncrement = counterId => {\n    this.props.dispatch({\n      type: INCREMENT,\n      payload: { counterId }\n    });\n  };\n\n  handleDecrement = counterId => {\n    this.props.dispatch({\n      type: DECREMENT,\n      payload: { counterId }\n    });\n  };\n\n  counterDelete = counterId => {\n    this.props.dispatch({\n      type: DELETE,\n      payload: { counterId }\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col col-sm-3 col-md-1\">\n            <h4>\n              <span className={this.getBadgeClass()}>\n                {this.getCounterValue()}\n              </span>\n            </h4>\n          </div>\n          <div className=\"col col-sm-2 col-md-1\">\n            <button\n              onClick={() => this.handleIncrement(this.props.counter)}\n              type=\"button\"\n              className=\"btn btn-success\"\n            >\n              +\n            </button>\n          </div>\n          <div className=\"col col-sm-2 col-md-1\">\n            <button\n              onClick={() => this.handleDecrement(this.props.counter)}\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              disabled={this.getDisabledState()}\n            >\n              -\n            </button>\n          </div>\n          <div className=\"col col-sm-2 col-md-1\">\n            <button\n              type=\"button\"\n              onClick={() => this.counterDelete(this.props.counter)}\n              className=\"btn btn-danger\"\n            >\n              x\n            </button>\n          </div>\n          <div className=\"col col-sm-3 col-md-2\">\n            <h4>Counters {this.props.counter.id}</h4>\n          </div>\n        </div>\n        <br />\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    counters: state.counters\n  };\n}\n\nexport default connect(mapStateToProps)(counter);\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\nimport { connect } from \"react-redux\";\n\nclass Counters extends Component {\n  render() {\n    return (\n      <div className=\"container card border-primary\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title \">Counters under Redux</h2>\n          <hr />\n          <div className=\"card-text\">\n            {this.props.counters.counters.map(c => (\n              <Counter key={c.id} counter={c} />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    counters: state.counters\n  };\n}\n\nexport default connect(mapStateToProps)(Counters);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar />\n        <Counters />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  INCREMENT,\n  DECREMENT,\n  DELETE,\n  RESET,\n  GET_COUNTERS\n} from \"../actions/actions\";\n\n// Reducer helps to return the state from the store as Redux dont know a thing\nconst initialState = {\n  counters: [\n    { id: 1, value: 0 },\n    { id: 2, value: 1 },\n    { id: 3, value: 2 },\n    { id: 4, value: 3 }\n  ]\n};\nexport default function counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case INCREMENT:\n      var counters = [...state.counters];\n      var index = counters.indexOf(action.payload.counterId);\n      counters[index] = { ...action.payload.counterId };\n      counters[index].value++;\n      return {\n        ...state,\n        counters\n      };\n\n    case DECREMENT:\n      var counters = [...state.counters];\n      var index = counters.indexOf(action.payload.counterId);\n      counters[index] = { ...action.payload.counterId };\n      if (counters[index].value !== 0) counters[index].value--;\n      return {\n        ...state,\n        counters\n      };\n\n    case DELETE:\n      var counters = state.counters.filter(\n        c => c.id !== action.payload.counterId.id\n      );\n      return {\n        ...state,\n        counters\n      };\n\n    case RESET:\n      var counters = state.counters.map(c => {\n        c.value = 0;\n        return c;\n      });\n      return {\n        ...state,\n        counters\n      };\n\n    case GET_COUNTERS:\n      return state;\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport counterReducer from \"./counterReducer\";\n\nexport default combineReducers({\n  counters: counterReducer\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store\";\nimport { Provider } from \"react-redux\";\n\nconst store = configureStore();\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\n\nexport default function configureStore() {\n  return createStore(rootReducer);\n}\n"],"sourceRoot":""}