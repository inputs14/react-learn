{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","Props","className","totalCounters","type","onClick","onReset","counter","getBadgeClass","props","value","getCounterValue","getDisabledState","Fragment","this","onIncrement","onDecrement","disabled","onDelete","id","Component","Counters","counters","map","c","key","App","state","handleIncrement","counterId","index","indexOf","setState","handleDecrement","counterDelete","filter","handleReset","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24e4e68d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = Props => {\n  return (\n    <div className=\"container-fluid\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <h1 className=\"text-right\">\n          Total counters - &nbsp;\n          <span className=\"badge badge-secondary\">{Props.totalCounters}</span>\n        </h1>{\" \"}\n        &nbsp; &nbsp;\n        <button\n          type=\"button\"\n          className=\"btn btn-success\"\n          onClick={() => Props.onReset()}\n        >\n          Reset\n        </button>\n      </nav>\n      <hr />\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass counter extends Component {\n  getBadgeClass = () => {\n    if (this.props.counter.value !== 0) {\n      return \"badge badge-pill badge-primary\";\n    } else {\n      return \"badge badge-pill badge-warning\";\n    }\n  };\n\n  getCounterValue = () => {\n    if (this.props.counter.value === 0) return \"Zero\";\n    return this.props.counter.value;\n  };\n\n  getDisabledState = () => {\n    if (this.props.counter.value === 0) return true;\n    return false;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col-1\">\n            <h4>\n              <span className={this.getBadgeClass()}>\n                {this.getCounterValue()}\n              </span>\n            </h4>\n          </div>\n          <div className=\"col-1\">\n            <button\n              onClick={() => this.props.onIncrement(this.props.counter)}\n              type=\"button\"\n              className=\"btn btn-success\"\n            >\n              +\n            </button>\n          </div>\n          <div className=\"col-1\">\n            <button\n              onClick={() => this.props.onDecrement(this.props.counter)}\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              disabled={this.getDisabledState()}\n            >\n              -\n            </button>\n          </div>\n          <div className=\"col-1\">\n            <button\n              type=\"button\"\n              onClick={() => this.props.onDelete(this.props.counter)}\n              className=\"btn btn-danger\"\n            >\n              x\n            </button>\n          </div>\n          <div className=\"col-2\">\n            <h4>Counters {this.props.counter.id}</h4>\n          </div>\n        </div>\n        <br />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    return (\n      <div className=\"container card border-primary\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title \">Counters</h2>\n          <hr />\n          <div className=\"card-text\">\n            {this.props.counters.map(c => (\n              <Counter\n                key={c.id}\n                counter={c}\n                onIncrement={this.props.onIncrement}\n                onDecrement={this.props.onDecrement}\n                onDelete={this.props.onDelete}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 1 },\n      { id: 3, value: 2 },\n      { id: 4, value: 3 }\n    ]\n  };\n  handleIncrement = counterId => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counterId);\n    counters[index] = { ...counterId };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDecrement = counterId => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counterId);\n    counters[index] = { ...counterId };\n    if (counters[index].value !== 0) counters[index].value--;\n    this.setState({ counters });\n  };\n\n  counterDelete = counter => {\n    const counters = this.state.counters.filter(c => c.id !== counter.id);\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.length}\n          onReset={this.handleReset}\n        />\n        <Counters\n          counters={this.state.counters}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.counterDelete}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}